//===-- VideocoreSubtarget.h - Define Subtarget for the Videocore ---------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the Videocore specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef VIDEOCORESUBTARGET_H
#define VIDEOCORESUBTARGET_H

#include "llvm/Target/TargetSubtargetInfo.h"
#include "llvm/MC/MCInstrItineraries.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "VideocoreGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class VideocoreSubtarget : public VideocoreGenSubtargetInfo {
  virtual void anchor();

public:
  // NOTE: O64 will not be supported.
  enum VideocoreABIEnum {
    UnknownABI, VC4
  };

protected:
  enum VideocoreArchEnum {
    Videocore32
  };

  // Videocore architecture version
  VideocoreArchEnum VideocoreArchVersion;

  // Videocore supported ABIs
  VideocoreABIEnum VideocoreABI;

  // IsLittle - The target is Little Endian
  bool IsLittle;

  InstrItineraryData InstrItins;

public:
  unsigned getTargetABI() const { return VideocoreABI; }

  /// This constructor initializes the data members to match that
  /// of the specified triple.
  VideocoreSubtarget(const std::string &TT, const std::string &CPU,
                const std::string &FS, bool little);

//- Vitual function, must have
  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  bool isLittle() const { return IsLittle; }
};
} // End llvm namespace

#endif
